// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: expense_query.sql

package db

import (
	"context"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expense (description, amount, category)
VALUES (?, ?, ?)
RETURNING id, description, amount, category, created_at, updated_at
`

type CreateExpenseParams struct {
	Description string `json:"description"`
	Amount      int    `json:"amount"`
	Category    int    `json:"category"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense, arg.Description, arg.Amount, arg.Category)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expense
WHERE id = ?
`

func (q *Queries) DeleteExpense(ctx context.Context, id int) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const getExpense = `-- name: GetExpense :one
SELECT id, description, amount, category, created_at, updated_at FROM expense
WHERE id = ?
`

func (q *Queries) GetExpense(ctx context.Context, id int) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExpense = `-- name: ListExpense :many
SELECT id, description, amount, category, created_at, updated_at FROM expense
ORDER BY id
`

func (q *Queries) ListExpense(ctx context.Context) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, listExpense)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Amount,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFilteredExpense = `-- name: ListFilteredExpense :many
SELECT id, description, amount, category, created_at, updated_at FROM expense 
WHERE strftime('%Y', created_at) = CAST(? AS TEXT)
AND strftime('%m', created_at) = CAST(? AS TEXT)
`

type ListFilteredExpenseParams struct {
	Column1 string `json:"column_1"`
	Column2 string `json:"column_2"`
}

func (q *Queries) ListFilteredExpense(ctx context.Context, arg ListFilteredExpenseParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, listFilteredExpense, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Amount,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :exec
UPDATE expense
SET description = ?,
amount = ?,
category = ?
WHERE id = ?
`

type UpdateExpenseParams struct {
	Description string `json:"description"`
	Amount      int    `json:"amount"`
	Category    int    `json:"category"`
	ID          int    `json:"id"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) error {
	_, err := q.db.ExecContext(ctx, updateExpense,
		arg.Description,
		arg.Amount,
		arg.Category,
		arg.ID,
	)
	return err
}

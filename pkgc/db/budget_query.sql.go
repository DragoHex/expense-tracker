// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: budget_query.sql

package db

import (
	"context"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budget (month_year, amount)
VALUES (?, ?)
RETURNING month_year, amount, created_at, updated_at
`

type CreateBudgetParams struct {
	MonthYear string `json:"month_year"`
	Amount    int    `json:"amount"`
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRowContext(ctx, createBudget, arg.MonthYear, arg.Amount)
	var i Budget
	err := row.Scan(
		&i.MonthYear,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
DELETE FROM budget
WHERE month_year = ?
`

func (q *Queries) DeleteBudget(ctx context.Context, monthYear string) error {
	_, err := q.db.ExecContext(ctx, deleteBudget, monthYear)
	return err
}

const getBudget = `-- name: GetBudget :one
SELECT month_year, amount, created_at, updated_at FROM budget
WHERE month_year = ?
`

func (q *Queries) GetBudget(ctx context.Context, monthYear string) (Budget, error) {
	row := q.db.QueryRowContext(ctx, getBudget, monthYear)
	var i Budget
	err := row.Scan(
		&i.MonthYear,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBudget = `-- name: ListBudget :many
SELECT month_year, amount, created_at, updated_at FROM budget
ORDER BY month_year
`

func (q *Queries) ListBudget(ctx context.Context) ([]Budget, error) {
	rows, err := q.db.QueryContext(ctx, listBudget)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Budget
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.MonthYear,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBudget = `-- name: UpdateBudget :exec
UPDATE budget
SET amount = ?
WHERE month_year = ?
`

type UpdateBudgetParams struct {
	Amount    int    `json:"amount"`
	MonthYear string `json:"month_year"`
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) error {
	_, err := q.db.ExecContext(ctx, updateBudget, arg.Amount, arg.MonthYear)
	return err
}
